#!/bin/sh
### BEGIN INIT INFO
# Provides:          fcgi-daemon
# Required-Start:    $remote_fs $syslog $network
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: FastCGI daemon
# Description:       FastCGI daemon for use with nginx
### END INIT INFO

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="FastCGI daemon"
NAME="fcgi-daemon"
SCRIPTNAME="/etc/init.d/$NAME"
DAEMON="/usr/share/perl5/FCGI/Daemon.pm"
PIDFILE="/var/run/${NAME}.pid"
SOCKFILE="/var/run/${NAME}.sock"
DAEMON_OPTS="-d -s $SOCKFILE -i $PIDFILE"
PERL="/usr/bin/perl"

# Exit if the package is not installed
[ -e "$DAEMON" ] || exit 0
[ -e "$PERL" ] || exit 0

set -e

DAEMON="$PERL $DAEMON"

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions


# Function that starts the daemon/service
do_start()
{
    # Return
    #   0 if daemon has been started
    #   1 if daemon was already running
    #   2 if daemon could not be started
    start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $PERL --startas $DAEMON --test > /dev/null \
        || ( log_warning_msg ": $NAME is already running"; return 1 )
    start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $PERL --startas $DAEMON -- $DAEMON_OPTS || return 2
    sleep 1
}

# Function that stops the daemon/service
do_stop()
{
    # Return
    #   0 if daemon has been stopped
    #   1 if daemon was already stopped
    #   2 if daemon could not be stopped
    #   other if a failure occurred
    start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE
    RETVAL=$?
    rm -f $PIDFILE $SOCKFILE
    return $RETVAL
}

# Function that sends a SIGHUP to the daemon/service -- not implemented
do_reload() {
    #
    # If the daemon can reload its configuration without
    # restarting (for example, when it is sent a SIGHUP),
    # then implement that here.
    #
    #start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --exec $DAEMON
    return 0
}

case "$1" in
  start)
    [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
    do_start
    case "$?" in
        0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
        2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
    ;;
  stop)
    [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
    do_stop
    case "$?" in
        0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
        2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
    ;;
  status)
    log_daemon_msg "Checking $DESC" "$NAME "
    pidofproc -p "$PIDFILE" >/dev/null
    case "$?" in
        0) log_success_msg "is running" ;;
        *) log_warning_msg "is NOT running" ;;
    esac
    ;;
  restart|force-reload)
    #
    # If the "reload" option is implemented then remove the
    # 'force-reload' alias
    #
    log_daemon_msg "Restarting $DESC" "$NAME"
    do_stop
    case "$?" in
      0|1)
        do_start
        case "$?" in
            0) log_end_msg 0 ;;
            1) log_end_msg 1 ;; # Old process is still running
            *) log_end_msg 1 ;; # Failed to start
        esac
        ;;
      *)
        # Failed to stop
        log_end_msg 1
        ;;
    esac
    ;;
  *)
    echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
    exit 3
    ;;
esac

:
